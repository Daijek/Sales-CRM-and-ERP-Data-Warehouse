/*
This script is to be run after the dataware house has been created
=============================================================================

This script helps us get a general understanding of the data through Exploratory Data Analysis, and simple report tables

*/



-- Explore All Objects in the Database

SELECT * FROM INFORMATION_SCHEMA.TABLES

-- Explore All Columns in the Database
SELECT * FROM INFORMATION_SCHEMA.COLUMNS

-- Explore all countreis the customers are from 
SELECT 
	DISTINCT country

FROM gold.dim_customers

SELECT
	country,
	COUNT(*) AS [country_count]
FROM [DataWarehouse].[gold].[dim_customers]
GROUP BY [country]

PRINT 'Explorring ALL categories "The major Divisions"'
-- Explore ALL categories "The major Divisions"
SELECT DISTINCT 
	[category], 
	[subcategory], 
	[name] 
FROM [gold].[dim_products]
ORDER BY 1,2,3

-- Find the date of the first and last order
SELECT 
	MIN(order_date) [first_date],
	MAX(order_date) [last_date],
	DATEDIFF(year, MIN(order_date), MAX(order_date)) [Date_difference]
FROM [gold].[fact_sales]

-- Find the youngest and oldest customer 
SELECT 
	MIN(birthdate) [youngest_customer],
	MAX(birthdate) [oldest_customers],
	DATEDIFF(year, MIN(birthdate), MAX(birthdate)) [Age_difference_btw_youngest_and_oldest]
FROM [gold].[dim_customers]

-- Find the Total sales
SELECT 
	SUM(sales_amount) [total_sales]
FROM [gold].[fact_sales]
-- Find how many items are sold
SELECT
	SUM(quantity) [total_items]
FROM [gold].[fact_sales]

-- Find the average selling price
SELECT
	AVG(price) [average_selling_price]
FROM [gold].[fact_sales]

-- Find the total number of orders
SELECT
	COUNT(order_number) [total_number_of_orders]
FROM [gold].[fact_sales]

-- Find the total number of products
SELECT
	COUNT(*) [total_number_of_products]
FROM [gold].[dim_products]

-- find the total number of customers
SELECT
	COUNT(*) [total_number_of_customers]
FROM [gold].[dim_customers]

-- Find the total number of customers that have placed an order
SELECT
	COUNT(DISTINCT fs.customer_key) [total_number_of_customers]
FROM [gold].[dim_customers] c
JOIN [gold].[fact_sales] [fs]
	ON c.customer_key = fs.customer_key
WHERE fs.order_number IS NOT NULL

-- Generate a report that shows all key metrics of the business
SELECT 
	'Total Sales' AS measure_name,
	SUM(sales_amount) AS measure_value
FROM [gold].[fact_sales]
UNION
SELECT 
	'Total items' AS measure_name,
	SUM(quantity) AS measure_value
FROM [gold].[fact_sales]
UNION
SELECT 
	'Average_selling_price' AS measure_name,
	AVG(price) AS measure_value
FROM [gold].[fact_sales]
UNION
SELECT 
	'total_number_of_orders' AS measure_name,
	COUNT(order_number) AS measure_value
FROM [gold].[fact_sales]
UNION
SELECT 
	'total_number_of_products' AS measure_name,
	COUNT(*) AS measure_value
FROM [gold].[dim_products]
UNION
SELECT 
	'total_number_of_customers' AS measure_name,
	COUNT(*) AS measure_value
FROM [gold].[dim_customers]

UNION
SELECT 
	'total_number_of_customers_with_placed_orders' AS measure_name,
	COUNT(DISTINCT fs.customer_key) AS measure_value
FROM [gold].[dim_customers] c
JOIN [gold].[fact_sales] [fs]
	ON c.customer_key = fs.customer_key
WHERE fs.order_number IS NOT NULL




-- Find total customers by countries
SELECT country, COUNT(*) total_customers FROM gold.dim_customers GROUP BY country ORDER BY total_customers DESC

-- Find total customers by gender
SELECT gender, COUNT(*) total_customers FROM gold.dim_customers GROUP BY gender ORDER BY total_customers DESC

-- find total products by category
SELECT category, COUNT(*) total_products FROM gold.dim_products GROUP BY category ORDER BY total_products DESC

-- what is the average cost in each category?
SELECT category, AVG(cost) average_cost FROM gold.dim_products GROUP BY category ORDER BY average_cost DESC

-- What is the total revenue generated for each category?
SELECT 
	p.category, 
	sum(fs.sales_amount) total_revenue 
FROM gold.dim_products p
LEFT JOIN gold.fact_sales fs ON fs.product_key = p.product_key
GROUP BY p.category
ORDER BY total_revenue DESC

-- Find total tevenue is generated by each customer
SELECT customer_key, SUM(sales_amount) total_revenue FROM gold.fact_sales GROUP BY customer_key ORDER BY total_revenue DESC

-- What is the districbution of sold items across countries 
SELECT
	[P].[name] AS [product], 
	[c].[country] AS [country],
	COUNT(*) AS [distribution_of_sold_items]
FROM gold.dim_products p
LEFT JOIN gold.fact_sales fs ON fs.product_key = p.product_key
LEFT JOIN gold.dim_customers c ON c.customer_key = fs.customer_key
WHERE fs.order_number IS NOT NULL
GROUP BY c.country, [name]
ORDER BY [distribution_of_sold_items] DESC


-- What are the 5 products generating the highest revenue?
SELECT TOP 5
	p.[name] AS product_name,
	SUM(fs.sales_amount) AS total_revenue
FROM gold.fact_sales fs
LEFT JOIN gold.dim_products p
	ON fs.product_key = p.product_key
GROUP BY p.[name]
ORDER BY total_revenue DESC

-- What are the 5 products generating the least revenue?
SELECT TOP 5
	p.[name] AS product_name,
	SUM(fs.sales_amount) AS total_revenue
FROM gold.fact_sales fs
LEFT JOIN gold.dim_products p
	ON fs.product_key = p.product_key
GROUP BY p.[name]
ORDER BY total_revenue ASC

-- What are the 5 products generating the highest revenue?
SELECT 
	*
FROM (
	SELECT
		ROW_NUMBER() OVER(ORDER BY SUM(fs.sales_amount) DESC) AS rank_products,
		p.[name] AS product_name,
		SUM(fs.sales_amount) AS total_revenue
	FROM gold.fact_sales fs
	LEFT JOIN gold.dim_products p
		ON fs.product_key = p.product_key
	GROUP BY p.[name]
	)t
WHERE rank_products <= 5